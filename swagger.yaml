---
openapi: 3.0.1
info:
  title: 얼굴 인식 시스템 API
  description: |-
    출퇴근 및 출입 관리를 위한 얼굴 인식 시스템 API 문서입니다.

    ## 공통 응답 형식

    ### 성공 응답
    ```json
    {
      "status": "success",
      "statusCode": 200,
      "message": "성공 메시지",
      "data": [...]
    }
    ```

    ### 성공 페이지네이션 포함 응답(페이지네이션은 옵션입니다.)
    ```json
    {
      "status": "success",
      "statusCode": 2xx,
      "message": "성공 메시지",
      "data": [...]
      "pagination": {
        "currentPage": x,
        "totalPages": x,
        "totalItems": x
      }
    }
    ```

    ### 오류 응답
    ```json
    {
      "status": "error",
      "statusCode": 4xx/5xx,
      "message": "오류 메시지",
      "data": []
    }
    ```

    ### 인증
    보안이 필요한 API는 Bearer 토큰이 필요합니다.
    로그인 API에서 발급받은 JWT 토큰을 Authorization 헤더에 넣어 요청하세요.
    인증이 필요한 API에는 자물쇠 아이콘이 표시됩니다.
    ```
    Authorization: Bearer {token}
    ```

    ```
  contact:
    name: Yoo_SH
    email: ads137485@jbnu.ac.kr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v1.0.0
servers:
- description: 로컬 서버
tags:
- name: WebAuth
  description: 웹 인증 관련 API
- name: CommuteLog
  description: 출퇴근 기록 관련 API
- name: Employee
  description: 직원 관리 관련 API
- name: CommuteTypeLog
  description: 출퇴근 유형 로그 관련 API
- name: DoorLog
  description: 출입 기록 관련 API
- name: Department
  description: 부서 관리 API
- name: CommuteType
  description: 출퇴근 유형 관리 관련 API
- name: Embedding
  description: 얼굴 인식 임베딩 관련 API
paths:
  "/api/web-auth/role":
    put:
      tags:
      - WebAuth
      summary: 역할 변경(ADMIN 권한 필요)
      description: 사용자 역할 변경
      operationId: updateRole
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PutRoleDto"
            examples:
              역할 변경 요청 예시:
                description: 역할 변경 요청 예시
                value:
                  loginId: yusung@capstone.kr
                  role: admin
        required: true
      responses:
        '200':
          description: 역할 변경 성공
          content:
            application/json:
              example:
                status: success
                statusCode: 200
                message: '역할이 변경되었습니다: 관리자'
                data: []
                pagination: 
        '400':
          description: 유효하지 않은 역할
          content:
            application/json:
              example:
                status: error
                statusCode: 400
                message: '유효하지 않은 역할입니다. 가능한 역할: admin, user'
                data: []
                pagination: 
        '403':
          description: 접근 권한 없음
          content:
            application/json:
              example:
                status: error
                statusCode: 403
                message: 접근 권한이 없습니다
                data: []
                pagination: 
        '404':
          description: 사용자 정보 없음
          content:
            application/json:
              example:
                status: error
                statusCode: 404
                message: 사용자를 찾을 수 없습니다
                data: []
                pagination: 
        '500':
          description: 서버 오류
          content:
            application/json:
              example:
                status: error
                statusCode: 500
                message: 서버 오류가 발생했습니다
                data: []
                pagination: 
      security:
      - Bearer Token: []
  "/api/web-auth/password":
    put:
      tags:
      - WebAuth
      summary: 비밀번호 변경(USER 권한 필요)
      description: 사용자 비밀번호 변경
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PutUpdatePasswordDto"
            examples:
              비밀번호 변경 요청 예시:
                description: 비밀번호 변경 요청 예시
                value:
                  loginId: yusung@capstone.kr
                  oldPassword: '1234'
                  newPassword: '5678'
        required: true
      responses:
        '200':
          description: 비밀번호 변경 성공
          content:
            application/json:
              example:
                status: success
                statusCode: 200
                message: 비밀번호가 변경되었습니다.
                data: []
                pagination: 
        '401':
          description: 기존 비밀번호 불일치
          content:
            application/json:
              example:
                status: error
                statusCode: 401
                message: 기존 비밀번호가 일치하지 않습니다.
                data: []
                pagination: 
        '403':
          description: 접근 권한 없음
          content:
            application/json:
              example:
                status: error
                statusCode: 403
                message: 접근 권한이 없습니다.
                data: []
                pagination: 
        '404':
          description: 사용자 정보 없음
          content:
            application/json:
              example:
                status: error
                statusCode: 404
                message: 사용자 정보를 찾을 수 없습니다.
                data: []
                pagination: 
        '500':
          description: 서버 오류
          content:
            application/json:
              example:
                status: error
                statusCode: 500
                message: 서버 오류가 발생했습니다.
                data: []
                pagination: 
      security:
      - Bearer Token: []
  "/api/employee/{employeeId}":
    get:
      tags:
      - Employee
      summary: 직원 상세 조회(USER 권한 필요)
      description: 특정 직원의 상세 정보를 조회합니다.
      operationId: getEmployeeById
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: 직원 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 사원 정보를 성공적으로 조회했습니다.
                data:
                  id: 1
                  department: 25
                  name: 유승현
                  email: yusung@capstone.kr
                  phoneNumber: 010-2547-9236
                  callNumber: 02-123-4561
                  companyFax: 
                  extensionNumber: '1234'
                  imageUrl: 
                pagination: 
        '404':
          description: 직원 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 사원 정보를 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
    put:
      tags:
      - Employee
      summary: 직원 정보 수정(ADMIN 권한 필요)
      description: 기존 직원의 정보를 수정합니다.
      operationId: updateEmployee
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: 직원 수정 정보
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Employee"
            example:
              name: 유승현(수정)
              email: kim_updated@example.com
              phoneNumber: 010-2345-6789
              callNumber: 02-234-5678
              extensionNumber: '1002'
              companyFax: 02-234-5679
              imageUrl: http://example.com/images/kim_new.jpg
              department: 4
        required: true
      responses:
        '200':
          description: 직원 수정 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 사원 정보를 성공적으로 수정했습니다.
                data:
                  id: 1
                  department: 25
                  name: 유승현(수정)
                  email: kim_updated@example.com
                  phoneNumber: 010-2345-6789
                  callNumber: 02-234-5678
                  companyFax: 02-234-5679
                  extensionNumber: '1002'
                  imageUrl: http://example.com/images/kim_new.jpg
                pagination: 
        '404':
          description: 직원 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 사원 정보를 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
    delete:
      tags:
      - Employee
      summary: 직원 삭제(ADMIN 권한 필요)
      description: 특정 직원의 정보를 삭제합니다.
      operationId: deleteEmployee
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: 직원 삭제 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 사원 정보를 성공적으로 삭제했습니다.
                data: 1
                pagination: 
        '404':
          description: 직원 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 사원 정보를 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/embedding/{id}":
    get:
      tags:
      - Embedding
      summary: 얼굴 임베딩 상세 조회(USER 권한 필요)
      description: 특정 얼굴 임베딩의 상세 정보를 조회합니다.
      operationId: getEmbeddingById
      parameters:
      - name: id
        in: path
        description: 얼굴 임베딩 ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: 임베딩 상세 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 임베딩을 성공적으로 조회했습니다.
                data:
                  id: 1
                  employee: 1
                  embeddingData: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGSA=
                pagination: 
        '404':
          description: 임베딩 데이터 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 임베딩을 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
    put:
      tags:
      - Embedding
      summary: 얼굴 임베딩 수정(ADMIN 권한 필요)
      description: 특정 얼굴 임베딩의 정보를 수정합니다.
      operationId: updateEmbeddingById
      parameters:
      - name: id
        in: path
        description: 얼굴 임베딩 ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PutUpdateEmbeddingByIdRequestDto"
        required: true
      responses:
        '200':
          description: 임베딩 수정 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 임베딩을 성공적으로 수정했습니다.
                data:
                  id: 1
                  employee: 1
                  embeddingData: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGSA=
                pagination: 
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 400
                message: 유효하지 않은 임베딩 데이터입니다.
                data: 
                pagination: 
        '404':
          description: 임베딩 데이터 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 임베딩을 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/department/{id}":
    get:
      tags:
      - Department
      summary: 부서 상세 조회(USER 권한 필요)
      description: 부서 ID로 특정 부서의 상세 정보를 조회합니다.
      operationId: getDepartmentById
      parameters:
      - name: id
        in: path
        description: 부서 ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: 부서 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 부서를 성공적으로 조회했습니다.
                data:
                  id: 1
                  name: 대표이사
                  role: 
                  memo: 
                  parent: 
                pagination: 
        '404':
          description: 부서 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 부서를 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
    put:
      tags:
      - Department
      summary: 부서 정보 수정(ADMIN 권한 필요)
      description: 기존 부서의 정보를 수정합니다.
      operationId: updateDepartment
      parameters:
      - name: id
        in: path
        description: 부서 ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: 부서 수정 정보
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PutUpdateDepartmentRequestDto"
            example:
              name: 수정된 부서명
              role: 수정된 역할
              memo: 부서 정보가 수정됨
              parentId: 4
        required: true
      responses:
        '200':
          description: 부서 수정 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 부서를 성공적으로 수정했습니다.
                data:
                  id: 37
                  name: 수정된 부서명
                  role: 수정된 역할
                  memo: 부서 정보가 수정됨
                  parent: 4
                pagination: 
        '404':
          description: 부서 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 부서를 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
    delete:
      tags:
      - Department
      summary: 부서 삭제(ADMIN 권한 필요)
      description: 부서를 삭제합니다.
      operationId: deleteDepartment
      parameters:
      - name: id
        in: path
        description: 부서 ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: 부서 삭제 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 부서를 성공적으로 삭제했습니다.
                data: 
                pagination: 
        '404':
          description: 부서 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 부서를 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/web-auth/register":
    post:
      tags:
      - WebAuth
      summary: 회원가입
      description: 이미 존재하는 직원 정보에 대해 로그인 계정 생성
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PostRegisterDto"
            examples:
              회원가입 요청 예시:
                description: 회원가입 요청 예시
                value:
                  name: 유승현
                  loginId: yusung@capstone.kr
                  password: '1234'
        required: true
      responses:
        '200':
          description: 계정 생성 성공
          content:
            application/json:
              example:
                status: success
                statusCode: 200
                message: 계정이 성공적으로 생성되었습니다.
                data: []
                pagination: 
        '400':
          description: 이미 존재하는 계정 또는 사용자를 찾을 수 없음
          content:
            application/json:
              example:
                status: error
                statusCode: 400
                message: 이미 존재하는 아이디입니다.
                data: []
                pagination: 
        '500':
          description: 서버 오류
          content:
            "*/*":
              schema:
                type: object
  "/api/web-auth/login":
    post:
      tags:
      - WebAuth
      summary: 로그인
      description: 사용자 로그인
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PostLoginDto"
            examples:
              로그인 요청 예시:
                description: 로그인 요청 예시
                value:
                  loginId: yusung@capstone.kr
                  password: '1234'
        required: true
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              example:
                status: success
                statusCode: 200
                message: 로그인 성공
                data:
                  token: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxIiwicm9sZSI6InVzZXIiLCJpYXQiOjE3NDcxNTA2OTIsImV4cCI6MTc0NzIzNzA5Mn0.lkjlkcTJM-Vztt_SBgxQ0uXWSeECGZChpI-kpnesQv-3PEl1u9bGVB1iQ9VBA6GW0N5LMFKWVEjSWDlb3qwsZA
                  tokenType: 
                  employeeId: 1
                  name: 유승현
                  role: user
                pagination: 
        '401':
          description: 로그인 실패
          content:
            application/json:
              example:
                status: error
                statusCode: 401
                message: 비밀번호가 일치하지 않습니다.
                data: []
                pagination: 
        '404':
          description: 사용자 정보 없음
          content:
            "*/*":
              schema:
                type: object
        '500':
          description: 서버 오류
          content:
            "*/*":
              schema:
                type: object
  "/api/employee":
    get:
      tags:
      - Employee
      summary: 모든 직원 조회(USER 권한 필요)
      description: 모든 직원의 정보를 페이지네이션과 함께 조회합니다.
      operationId: getAllEmployees
      parameters:
      - name: arg0
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 직원 목록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 사원 목록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  department:
                    id: 25
                    name: 해양SI팀
                    role: 
                    memo: 
                    parent: 7
                  name: 유승현
                  email: yusung@capstone.kr
                  phoneNumber: 010-2547-9236
                  callNumber: 02-123-4561
                  companyFax: 
                  extensionNumber: '1234'
                  imageUrl: 
                - id: 2
                  department: 25
                  name: 양윤서
                  email: yunsu@capstone.kr
                  phoneNumber: 010-2547-9237
                  callNumber: 02-123-4562
                  companyFax: 
                  extensionNumber: '1235'
                  imageUrl: 
                - id: 3
                  department: 25
                  name: 이민수
                  email: minsu@capstone.kr
                  phoneNumber: 010-2547-9238
                  callNumber: 02-123-4563
                  companyFax: 
                  extensionNumber: '1236'
                  imageUrl: 
                - id: 4
                  department: 25
                  name: 박선우
                  email: sunwoo@capstone.kr
                  phoneNumber: 010-2547-9239
                  callNumber: 02-123-4564
                  companyFax: 
                  extensionNumber: '1237'
                  imageUrl: 
                - id: 5
                  department: 25
                  name: 김영길
                  email: 07kyk@all4land.com
                  phoneNumber: 010-4545-8247
                  callNumber: 010-4545-8245
                  companyFax: 
                  extensionNumber: '1238'
                  imageUrl: 
                pagination:
                  currentPage: 0
                  totalPages: 1
                  totalElements: 5
        '404':
          description: 직원 목록 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 존재하지 않는 사원입니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
    post:
      tags:
      - Employee
      summary: 직원 생성(ADMIN 권한 필요)
      description: 새로운 직원 정보를 생성합니다.
      operationId: createEmployee
      requestBody:
        description: 직원 생성 정보
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Employee"
            example:
              name: 박지민
              email: park@example.com
              phoneNumber: 010-9876-5432
              callNumber: 02-987-6543
              extensionNumber: '1051'
              companyFax: 02-987-6544
              imageUrl: http://example.com/images/park.jpg
              department:
                id: 30
        required: true
      responses:
        '201':
          description: 직원 생성 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 201
                message: 사원 정보를 성공적으로 생성했습니다.
                data:
                  id: 6
                  department: 30
                  name: 박지민
                  email: park@example.com
                  phoneNumber: 010-9876-5432
                  callNumber: 02-987-6543
                  companyFax: 02-987-6544
                  extensionNumber: '1051'
                  imageUrl: http://example.com/images/park.jpg
                pagination: 
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 400
                message: 잘못된 요청 파라미터입니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/door-log/employee/{employeeId}":
    get:
      tags:
      - DoorLog
      summary: 직원별 출입 기록 조회(USER 권한 필요)
      description: 특정 직원의 출입 기록을 페이지네이션과 함께 조회합니다.
      operationId: getDoorLogByEmployeeId
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      - name: arg1
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 출입 기록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 출입 로그 목록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  type: check_in
                  timeStamp: '2023-11-01T09:00:00'
                  imageUrl: http://example.com/images/entry1.jpg
                  floorNumber: 4
                  similarity: 0.92
                - id: 2
                  employee: 1
                  type: check_out
                  timeStamp: '2023-11-01T18:00:00'
                  imageUrl: http://example.com/images/exit1.jpg
                  floorNumber: 4
                  similarity: 0.89
                pagination:
                  currentPage: 0
                  totalPages: 5
                  totalElements: 50
        '404':
          description: 출입 기록 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 해당 사원의 출입 기록이 존재하지 않습니다.
      security:
      - Bearer Token: []
    post:
      tags:
      - DoorLog
      summary: 출입문 기록 생성(USER 권한 필요)
      description: 특정 직원의 출입문 기록을 생성합니다.
      operationId: createDoorLogByEmployeeId
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: 출입 로그 생성 정보
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PostCreateDoorLogByEmployeeIdRequestDto"
            example:
              type: check_in
              timestamp: '2024-05-02T09:05:34'
              imageUrl: http://example.com/placeholder.jpg
              floorNumber: 4
              similarity: 0.95
        required: true
      responses:
        '201':
          description: 출입 기록 생성 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 201
                message: 출입 로그를 성공적으로 생성했습니다.
                data:
                  id: 7
                  employee: 1
                  type: check_in
                  timeStamp: '2024-05-02T09:05:34'
                  imageUrl: http://example.com/placeholder.jpg
                  floorNumber: 4
                  similarity: 0.95
                pagination: 
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 400
                message: 잘못된 요청 형식입니다. 필수 필드가 누락되었습니다.
        '404':
          description: 직원 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 사원을 찾을 수 없습니다.
                data: []
                pagination: 
      security:
      - Bearer Token: []
  "/api/department":
    get:
      tags:
      - Department
      summary: 부서 목록 조회(USER 권한 필요)
      description: 모든 부서 정보를 페이지네이션과 함께 조회합니다.
      operationId: getAllDepartments
      parameters:
      - name: arg0
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 부서 목록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 부서 목록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  name: 대표이사
                  role: 
                  memo: 
                  parent: 
                - id: 2
                  name: 경영관리부
                  role: 
                  memo: 
                  parent: 1
                - id: 3
                  name: 사업부문
                  role: 
                  memo: 
                  parent: 1
                - id: 4
                  name: 영업부문
                  role: 
                  memo: 
                  parent: 1
                - id: 5
                  name: SD사업부
                  role: 
                  memo: 
                  parent: 3
                - id: 6
                  name: DX사업부
                  role: 
                  memo: 
                  parent: 3
                - id: 7
                  name: 해양산업본부
                  role: 
                  memo: 
                  parent: 3
                - id: 8
                  name: 공간융합연구소
                  role: 
                  memo: 
                  parent: 3
                - id: 9
                  name: DX연구소
                  role: 
                  memo: 
                  parent: 3
                - id: 10
                  name: BS본부
                  role: 
                  memo: 
                  parent: 3
                pagination:
                  currentPage: 0
                  totalPages: 4
                  totalElements: 35
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 400
                message: 유효하지 않은 페이지 사이즈 또는 페이지 번호 파라미터입니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
    post:
      tags:
      - Department
      summary: 부서 생성(ADMIN 권한 필요)
      description: 새로운 부서를 생성합니다.
      operationId: createDepartment
      requestBody:
        description: 부서 생성 정보
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PostCreateDepartmentRequestDto"
            example:
              name: 신규부서
              role: 신규역할
              memo: 신규부서 생성
              parentId: 4
        required: true
      responses:
        '201':
          description: 부서 생성 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 201
                message: 부서를 성공적으로 생성했습니다.
                data:
                  id: 36
                  name: 신규부서
                  role: 신규역할
                  memo: 신규부서 생성
                  parent: 4
                pagination: 
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 400
                message: 잘못된 요청 파라미터입니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/commute-type-log/employee/{employeeId}":
    get:
      tags:
      - CommuteTypeLog
      summary: 직원별 출퇴근 유형 로그 조회(USER 권한 필요(USER 권한 필요)
      description: 특정 직원의 출퇴근 유형 로그를 페이지네이션과 함께 조회합니다.
      operationId: getCommuteTypeLogByEmployeeId
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      - name: arg1
        in: query
        description: 페이지네이션 요청 정보
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 출퇴근 유형 로그 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 사원의 근태 기록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  commuteType:
                    id: 1
                    code: A
                    checkIn: '08:00:00'
                    checkOut: '17:00:00'
                  startDate: '2025-02-01'
                  endDate: '2025-03-31'
                pagination:
                  currentPage: 0
                  totalPages: 1
                  totalElements: 1
        '404':
          description: 출퇴근 유형 로그 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 해당 사원의 출퇴근 타입 로그가 존재하지 않습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
    post:
      tags:
      - CommuteTypeLog
      summary: 직원별 출퇴근 유형 로그 생성(USER 권한 필요)
      description: 직원의 출퇴근 유형 로그를 생성합니다.
      operationId: createCommuteTypeLogByEmployeeId
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PostCreateCommuteTypeLogByEmployeeIdRequestDto"
        required: true
      responses:
        '200':
          description: 출퇴근 유형 로그 생성 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 출퇴근 타입 로그를 성공적으로 생성했습니다.
                data:
                  id: 7
                  employee: 1
                  commuteType:
                    id: 1
                    code: A
                    checkIn: '08:00:00'
                    checkOut: '17:00:00'
                  startDate: '2025-06-01'
                  endDate: '2025-06-01'
                pagination: 
      security:
      - Bearer Token: []
  "/api/commute-log/employee/{employeeId}":
    get:
      tags:
      - CommuteLog
      summary: 직원별 출퇴근 기록 조회(USER 권한 필요)
      description: 특정 직원의 출퇴근 기록을 페이지네이션과 함께 조회합니다.
      operationId: getCommuteLogsByEmployeeId
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      - name: arg1
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 출퇴근 기록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 출퇴근 기록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  reason: 도로 공사로 인한 교통 체증
                  checkIn: '09:00:00'
                  checkOut: '18:00:00'
                  workDate: '2024-04-16'
                  isLated: false
                pagination:
                  currentPage: 0
                  totalPages: 1
                  totalElements: 1
        '404':
          description: 출퇴근 기록 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 출퇴근 기록이 존재하지 않습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
    post:
      tags:
      - CommuteLog
      summary: 출퇴근 기록 생성(USER 권한 필요)
      description: 특정 직원의 출퇴근 기록을 생성합니다.
      operationId: createCommuteLogByEmployeeId
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: 출퇴근 기록 생성 정보
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PostCreateCommuteLogByEmployeeIdRequestDto"
            example:
              checkIn: '09:05:00'
              checkOut: '18:10:00'
              workDate: '2023-11-15'
              reason: 교통 체증
              isLated: true
              commuteType: A
        required: true
      responses:
        '201':
          description: 출퇴근 기록 생성 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 201
                message: 출퇴근 기록을 성공적으로 생성했습니다.
                data:
                  id: 4
                  employee: 1
                  reason: 교통 체증
                  checkIn: '09:05:00'
                  checkOut: '18:10:00'
                  workDate: '2023-11-15'
                  isLated: true
                pagination: 
        '404':
          description: 직원 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 사원을 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/employee/{employeeId}/image":
    patch:
      tags:
      - Employee
      summary: 직원 이미지 업데이트(USER 권한 필요)
      description: 직원의 이미지 URL을 업데이트합니다.
      operationId: updateEmployeeImage
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: 직원 이미지 수정 정보
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PatchUpdateEmployeeImageRequestDto"
            example:
              imageUrl: https://example.com/images/employee.jpg
        required: true
      responses:
        '200':
          description: 직원 이미지 업데이트 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 사원 이미지를 성공적으로 수정했습니다.
                data:
                  id: 1
                  department: 25
                  name: 유승현
                  email: yusung@capstone.kr
                  phoneNumber: 010-2547-9236
                  callNumber: 02-123-4561
                  companyFax: 
                  extensionNumber: '1234'
                  imageUrl: https://example.com/images/employee.jpg
                pagination: 
        '404':
          description: 직원 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 사원 정보를 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/commute-log/{id}/reason":
    patch:
      tags:
      - CommuteLog
      summary: 출퇴근 사유 수정(USER 권한 필요)
      description: 특정 출퇴근 기록의 사유를 수정합니다.
      operationId: updateCommuteLogReason
      parameters:
      - name: id
        in: path
        description: 출퇴근 기록 ID
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: 출퇴근 사유 수정 정보
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PatchUpdateCommuteLogReasonRequestDto"
            example:
              reason: 도로 공사로 인한 교통 체증
        required: true
      responses:
        '200':
          description: 출퇴근 사유 수정 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 출퇴근 기록을 성공적으로 수정했습니다.
                data:
                  id: 101
                  checkIn: '09:05:00'
                  checkOut: '18:10:00'
                  workDate: '2023-11-15'
                  isLated: true
                  reason: 도로 공사로 인한 교통 체증
                  employee: 1
        '404':
          description: 출퇴근 기록 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 출퇴근 기록을 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/embedding":
    get:
      tags:
      - Embedding
      summary: 모든 얼굴 임베딩 조회(USER 권한 필요)
      description: 모든 얼굴 임베딩 정보를 페이지네이션과 함께 조회합니다.
      operationId: getEmbedding
      parameters:
      - name: arg0
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 임베딩 목록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 임베딩 목록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  embeddingData: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGSA=
                - id: 2
                  employee: 2
                  embeddingData: ISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OUA=
                - id: 3
                  employee: 3
                  embeddingData: QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWWA=
                - id: 4
                  employee: 4
                  embeddingData: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eYA=
                - id: 5
                  employee: 5
                  embeddingData: gYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmgA=
                pagination:
                  currentPage: 0
                  totalPages: 1
                  totalElements: 5
        '404':
          description: 임베딩 데이터 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 임베딩이 존재하지 않습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/embedding/employee/{employeeId}":
    get:
      tags:
      - Embedding
      summary: 직원별 얼굴 임베딩 조회(USER 권한 필요)
      description: 특정 직원의 얼굴 임베딩 정보를 조회합니다.
      operationId: getEmbeddingByEmployeeId
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: 직원별 임베딩 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 임베딩을 성공적으로 조회했습니다.
                data:
                  id: 1
                  employee: 1
                  embeddingData: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGSA=
                pagination: 
        '404':
          description: 임베딩 데이터 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 임베딩을 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/door-log":
    get:
      tags:
      - DoorLog
      summary: 모든 출입 기록 조회(USER 권한 필요)
      description: 모든 출입 기록을 페이지네이션과 함께 조회합니다.
      operationId: getAllDoorLog
      parameters:
      - name: arg0
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 출입 기록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 출입 로그 목록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  type: check_in
                  timeStamp: '2023-11-01T09:00:00'
                  imageUrl: http://example.com/images/entry1.jpg
                  floorNumber: 4
                  similarity: 0.92
                - id: 2
                  employee: 1
                  type: check_out
                  timeStamp: '2023-11-01T18:00:00'
                  imageUrl: http://example.com/images/exit1.jpg
                  floorNumber: 4
                  similarity: 0.89
                pagination:
                  currentPage: 0
                  totalPages: 10
                  totalElements: 100
        '404':
          description: 출입 기록 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 출입 기록이 존재하지 않습니다.
      security:
      - Bearer Token: []
  "/api/door-log/employee/{employeeId}/date":
    get:
      tags:
      - DoorLog
      summary: 직원별 날짜별 출입 기록 조회(USER 권한 필요)
      description: 특정 직원의 특정 날짜 범위의 출입 기록을 페이지네이션과 함께 조회합니다.
      operationId: getDoorLogByEmployeeIdAndDate
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      - name: startDate
        in: query
        description: 시작 날짜 (YYYY-MM-DD)
        required: true
        schema:
          type: string
      - name: endDate
        in: query
        description: 종료 날짜 (YYYY-MM-DD)
        required: false
        schema:
          type: string
      - name: arg3
        in: query
        description: 페이지네이션 정보
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
        examples:
          사용자 정의 페이지네이션:
            summary: 페이지 크기 20, 두 번째 페이지, 타임스탬프로 정렬
            description: 사용자 정의 페이지네이션
            value: page=1&size=20&sort=timeStamp,desc
          기본 페이지네이션:
            summary: 페이지 크기 10, 첫 번째 페이지
            description: 기본 페이지네이션
            value: page=0&size=10&sort=id,desc
      responses:
        '200':
          description: 출입 기록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 출입 로그 목록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  type: check_in
                  timeStamp: '2023-11-01T09:00:00'
                  imageUrl: http://example.com/images/entry1.jpg
                  floorNumber: 4
                  similarity: 0.92
                - id: 2
                  employee: 1
                  type: check_out
                  timeStamp: '2023-11-01T18:00:00'
                  imageUrl: http://example.com/images/exit1.jpg
                  floorNumber: 4
                  similarity: 0.89
                pagination:
                  currentPage: 0
                  totalPages: 2
                  totalElements: 15
        '404':
          description: 출입 기록 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 사원의 출입 기간별 로그가 존재하지 않습니다.
                data: []
                pagination: 
      security:
      - Bearer Token: []
  "/api/door-log/department/{departmentId}/current-count":
    get:
      tags:
      - DoorLog
      summary: 부서별 현재 인원 수 조회(USER 권한 필요)
      description: 현재 부서에 있는 인원 수를 계산합니다. 당일 데이터에서 각 직원의 check_in(입실), check_out(퇴실)
        기록을 시간 순서대로 처리하여 현재 상태를 파악합니다. 각 직원의 최신 상태가 check_in인 경우만 현재 부서에 있는 것으로 간주합니다.
      operationId: getCurrentDepartmentHeadcount
      parameters:
      - name: departmentId
        in: path
        description: 부서 ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: 부서별 현재 인원 수 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 현재 부서 내 인원 수를 성공적으로 조회했습니다.
                data:
                  departmentId: 1
                  departmentName: 개발팀
                  presentCount: 5
                  totalEmployees: 10
                  timestamp: '2023-06-10T14:30:15'
                pagination: 
        '404':
          description: 부서 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 해당 부서를 찾을 수 없습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/commute-type":
    get:
      tags:
      - CommuteType
      summary: 모든 출퇴근 유형 조회(USER 권한 필요)
      description: 모든 출퇴근 유형의 정보를 조회합니다.
      operationId: getAllCommuteType
      responses:
        '200':
          description: 출퇴근 유형 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 출퇴근 유형 조회 성공
                data:
                - id: 1
                  code: A
                  checkIn: '08:00:00'
                  checkOut: '17:00:00'
                - id: 2
                  code: B
                  checkIn: '09:30:00'
                  checkOut: '18:00:00'
                - id: 3
                  code: C
                  checkIn: '10:00:00'
                  checkOut: '19:00:00'
                pagination: 
        '404':
          description: 출퇴근 유형 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 출퇴근 유형이 존재하지 않습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/commute-type-log":
    get:
      tags:
      - CommuteTypeLog
      summary: 모든 출퇴근 유형 로그 조회(USER 권한 필요(USER 권한 필요)
      description: 모든 출퇴근 유형 로그를 페이지네이션과 함께 조회합니다.
      operationId: getAllCommuteTypeLog
      parameters:
      - name: arg0
        in: query
        description: 페이지네이션 요청 정보
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 출퇴근 유형 로그 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 근태 기록 목록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  commuteType:
                    id: 1
                    code: A
                    checkIn: '08:00:00'
                    checkOut: '17:00:00'
                  startDate: '2025-02-01'
                  endDate: '2025-03-31'
                - id: 2
                  employee: 2
                  commuteType:
                    id: 2
                    code: B
                    checkIn: '09:30:00'
                    checkOut: '18:00:00'
                  startDate: '2025-02-23'
                  endDate: '2025-03-31'
                - id: 3
                  employee: 3
                  commuteType:
                    id: 3
                    code: C
                    checkIn: '10:00:00'
                    checkOut: '19:00:00'
                  startDate: '2025-02-11'
                  endDate: '2025-03-31'
                - id: 4
                  employee: 3
                  commuteType:
                    id: 2
                    code: B
                    checkIn: '09:30:00'
                    checkOut: '18:00:00'
                  startDate: '2025-02-20'
                  endDate: '2025-03-31'
                - id: 5
                  employee: 4
                  commuteType:
                    id: 1
                    code: A
                    checkIn: '08:00:00'
                    checkOut: '17:00:00'
                  startDate: '2025-02-05'
                  endDate: '2025-03-31'
                - id: 6
                  employee: 5
                  commuteType:
                    id: 2
                    code: B
                    checkIn: '09:30:00'
                    checkOut: '18:00:00'
                  startDate: '2025-02-04'
                  endDate: '2025-03-31'
                pagination:
                  currentPage: 0
                  totalPages: 1
                  totalElements: 6
        '404':
          description: 출퇴근 유형 로그 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 출퇴근 타입 로그가 존재하지 않습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/commute-type-log/employee/{employeeId}/date-range":
    get:
      tags:
      - CommuteTypeLog
      summary: 직원별 날짜별 출퇴근 유형 로그 조회(USER 권한 필요)
      description: 특정 직원의 특정 날짜 또는 날짜 범위의 출퇴근 유형 로그를 페이지네이션과 함께 조회합니다.
      operationId: getCommuteTypeLogByEmployeeIdAndDate
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      - name: startDate
        in: query
        description: 시작 날짜 (YYYY-MM-DD)
        required: true
        schema:
          type: string
      - name: endDate
        in: query
        description: 종료 날짜 (YYYY-MM-DD)
        required: false
        schema:
          type: string
      - name: arg3
        in: query
        description: 페이지네이션 요청 정보
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 출퇴근 유형 로그 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 사원의 기간별 근태 기록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  commuteType:
                    id: 1
                    code: A
                    checkIn: '08:00:00'
                    checkOut: '17:00:00'
                  startDate: '2025-02-01'
                  endDate: '2025-03-31'
                pagination:
                  currentPage: 0
                  totalPages: 1
                  totalElements: 1
        '404':
          description: 출퇴근 유형 로그 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 해당 기간의 출퇴근 타입 로그가 존재하지 않습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/commute-log":
    get:
      tags:
      - CommuteLog
      summary: 모든 출퇴근 기록 조회(USER 권한 필요)
      description: 모든 출퇴근 기록을 페이지네이션과 함께 조회합니다.
      operationId: getAllCommuteLog
      parameters:
      - name: arg0
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 출퇴근 기록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 출퇴근 기록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  reason: 
                  checkIn: '09:00:00'
                  checkOut: '18:00:00'
                  workDate: '2024-04-16'
                  isLated: false
                - id: 2
                  employee: 2
                  reason: 
                  checkIn: '09:05:00'
                  checkOut: '18:10:00'
                  workDate: '2024-04-16'
                  isLated: false
                - id: 3
                  employee: 3
                  reason: 
                  checkIn: '08:55:00'
                  checkOut: '18:05:00'
                  workDate: '2024-04-16'
                  isLated: false
                pagination:
                  currentPage: 0
                  totalPages: 1
                  totalElements: 3
        '404':
          description: 출퇴근 기록 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 출퇴근 기록이 존재하지 않습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
  "/api/commute-log/employee/{employeeId}/date-range":
    get:
      tags:
      - CommuteLog
      summary: 직원별 기간별 출퇴근 기록 조회(USER 권한 필요)
      description: 특정 직원의 특정 기간 동안의 출퇴근 기록을 페이지네이션과 함께 조회합니다.
      operationId: getCommuteLogByEmployeeIdAndDate
      parameters:
      - name: employeeId
        in: path
        description: 직원 ID
        required: true
        schema:
          type: integer
          format: int32
      - name: startDate
        in: query
        description: 시작 날짜 (YYYY-MM-DD)
        required: true
        schema:
          type: string
          format: date
      - name: endDate
        in: query
        description: 종료 날짜 (YYYY-MM-DD)
        required: false
        schema:
          type: string
          format: date
      - name: arg3
        in: query
        description: 페이지네이션 요청 정보
        required: true
        schema:
          "$ref": "#/components/schemas/PaginationRequestDto"
      responses:
        '200':
          description: 출퇴근 기록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: success
                statusCode: 200
                message: 출퇴근 기록을 성공적으로 조회했습니다.
                data:
                - id: 1
                  employee: 1
                  reason: 도로 공사로 인한 교통 체증
                  checkIn: '09:00:00'
                  checkOut: '18:00:00'
                  workDate: '2024-04-16'
                  isLated: false
                pagination:
                  currentPage: 0
                  totalPages: 1
                  totalElements: 1
        '404':
          description: 출퇴근 기록 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiResponseDto"
              example:
                status: error
                statusCode: 404
                message: 출퇴근 기록이 존재하지 않습니다.
                data: 
                pagination: 
      security:
      - Bearer Token: []
components:
  schemas:
    PutRoleDto:
      required:
      - loginId
      - role
      type: object
      properties:
        loginId:
          type: string
        role:
          type: string
    PutUpdatePasswordDto:
      required:
      - loginId
      - newPassword
      - oldPassword
      type: object
      properties:
        loginId:
          type: string
        oldPassword:
          type: string
        newPassword:
          type: string
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int32
        department:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        callNumber:
          type: string
        companyFax:
          type: string
        extensionNumber:
          type: string
        imageUrl:
          type: string
    ApiResponseDto:
      type: object
      properties:
        status:
          type: string
        statusCode:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: object
        pagination:
          "$ref": "#/components/schemas/Pagination"
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
    PutUpdateEmbeddingByIdRequestDto:
      required:
      - embeddingData
      type: object
      properties:
        embeddingData:
          type: array
          description: 임베딩 데이터
          example: byte[]
          items:
            type: string
            description: 임베딩 데이터
            format: byte
            example: Ynl0ZVtd
    PutUpdateDepartmentRequestDto:
      required:
      - name
      - parentId
      type: object
      properties:
        name:
          type: string
          description: 부서명
          example: 영업부
        role:
          type: string
          description: 역할
          example: 영업팀장
        memo:
          type: string
          description: 메모
          example: 영업팀장 메모
        parentId:
          type: integer
          description: 상위 부서번호
          format: int32
          example: 1
    PostRegisterDto:
      required:
      - loginId
      - name
      - password
      type: object
      properties:
        name:
          type: string
        loginId:
          type: string
        password:
          type: string
    PostLoginDto:
      required:
      - loginId
      - password
      type: object
      properties:
        loginId:
          type: string
        password:
          type: string
    PostCreateDoorLogByEmployeeIdRequestDto:
      required:
      - imageUrl
      - similarity
      - type
      type: object
      properties:
        type:
          pattern: "^(check_in|check_out)$"
          type: string
          description: 타입
          example: check_in
        timestamp:
          type: string
          description: 타임스탬프
          example: '2024-01-01 09:00:00'
        imageUrl:
          type: string
          description: 이미지 URL
          example: https://example.com/image.jpg
        floorNumber:
          type: integer
          description: 층수
          format: int32
          example: 4
        similarity:
          type: number
          description: 유사도
          format: float
          example: 0.95
    PostCreateDepartmentRequestDto:
      required:
      - name
      - parentId
      type: object
      properties:
        name:
          type: string
          description: 부서명
          example: 영업부
        role:
          type: string
          description: 역할
          example: 영업팀장
        memo:
          type: string
          description: 메모
          example: 영업팀장 메모
        parentId:
          type: integer
          description: 상위 부서번호
          format: int32
          example: 1
    PostCreateCommuteTypeLogByEmployeeIdRequestDto:
      required:
      - typeCode
      type: object
      properties:
        typeCode:
          type: string
          enum:
          - A
          - B
          - C
    PostCreateCommuteLogByEmployeeIdRequestDto:
      type: object
      properties:
        reason:
          type: string
          description: 출퇴근 사유
          example: 도로 공사로 인한 교통 체증
        checkIn:
          type: string
          description: 출근시간
          example: '2024-01-01 09:00:00'
        checkOut:
          type: string
          description: 퇴근시간
          example: '2024-01-01 18:00:00'
        workDate:
          type: string
          description: 근무일
          example: '2024-01-01'
        isLated:
          type: boolean
          description: 지각여부
          example: true
    PatchUpdateEmployeeImageRequestDto:
      required:
      - imageUrl
      type: object
      properties:
        imageUrl:
          type: string
          description: 직원 이미지 URL
          example: https://example.com/images/employee.jpg
    PatchUpdateCommuteLogReasonRequestDto:
      required:
      - reason
      type: object
      properties:
        reason:
          type: string
          description: 출퇴근 사유
          example: 도로 공사로 인한 교통 체증
    PaginationRequestDto:
      type: object
      properties:
        pageNumber:
          minimum: 0
          type: integer
          description: 페이지 번호
          format: int32
          example: 0
        pageSize:
          minimum: 1
          type: integer
          description: 페이지 사이즈
          format: int32
          example: 10
        orderBy:
          type: string
          description: 정렬 기준
          example: id
        sortDirection:
          type: string
          description: 정렬 방향
          example: ASC | DESC
  responses:
    SuccessResponse:
      description: 성공 응답
      content:
        application/json:
          examples:
            성공_응답:
              summary: 성공 응답
              description: API 호출 성공 시 응답 형식
              value:
                statusCode: 2xx
                message: 성공메시지
                status: success
                data: []
    ErrorResponse:
      description: 오류 응답
      content:
        application/json:
          examples:
            오류_응답:
              summary: 오류 응답
              description: API 호출 실패 시 응답 형식
              value:
                statusCode: 4xx/5xx
                message: 오류 메시지
                status: error
                data: []
    PaginationResponse:
      description: 페이지네이션 응답
      content:
        application/json:
          examples:
            페이지네이션_응답:
              summary: 페이지네이션 응답
              description: 페이지네이션이 포함된 API 호출 성공 시 응답 형식
              value:
                statusCode: 2xx
                status: success
                data: []
                pagination:
                  currentPage: 'x(default: 0)'
                  totalPages: x
                  totalItems: x
                message: 성공 메시지
  securitySchemes:
    Bearer Token:
      type: http
      description: 'JWT 토큰을 헤더에 입력하세요. 예: Bearer {token}'
      scheme: bearer
      bearerFormat: JWT
